#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import pprint
import sys

if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from Python.pyavatar.thrift import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  bool Visual_L(bool vis)')
    print('  bool Visual_R(bool vis)')
    print('  bool Somatosensory_L(bool somat1)')
    print('  bool Somatosensory_R(bool somat)')
    print('  bool RewardSignal(bool psneg)')
    print('  bool SalienceSignal(bool psneg)')
    print('  double GetFwd()')
    print('  double GetRot()')
    print('  bool SendPosition(double posx, double posy)')
    print('   GetStates()')
    print('   GetNodeLocation(int nodeid)')
    print('  int GetNodeNumber()')
    print('  int NextSimulation()')
    print('  bool SendNextUnityCondition(bool condition)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = AvatarIO.Client(protocol)
transport.open()

if cmd == 'Visual_L':
    if len(args) != 1:
        print('Visual_L requires 1 args')
        sys.exit(1)
    pp.pprint(client.Visual_L(eval(args[0]),))

elif cmd == 'Visual_R':
    if len(args) != 1:
        print('Visual_R requires 1 args')
        sys.exit(1)
    pp.pprint(client.Visual_R(eval(args[0]),))

elif cmd == 'Somatosensory_L':
    if len(args) != 1:
        print('Somatosensory_L requires 1 args')
        sys.exit(1)
    pp.pprint(client.Somatosensory_L(eval(args[0]),))

elif cmd == 'Somatosensory_R':
    if len(args) != 1:
        print('Somatosensory_R requires 1 args')
        sys.exit(1)
    pp.pprint(client.Somatosensory_R(eval(args[0]),))

elif cmd == 'RewardSignal':
    if len(args) != 1:
        print('RewardSignal requires 1 args')
        sys.exit(1)
    pp.pprint(client.RewardSignal(eval(args[0]),))

elif cmd == 'SalienceSignal':
    if len(args) != 1:
        print('SalienceSignal requires 1 args')
        sys.exit(1)
    pp.pprint(client.SalienceSignal(eval(args[0]),))

elif cmd == 'GetFwd':
    if len(args) != 0:
        print('GetFwd requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetFwd())

elif cmd == 'GetRot':
    if len(args) != 0:
        print('GetRot requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetRot())

elif cmd == 'SendPosition':
    if len(args) != 2:
        print('SendPosition requires 2 args')
        sys.exit(1)
    pp.pprint(client.SendPosition(eval(args[0]), eval(args[1]),))

elif cmd == 'GetStates':
    if len(args) != 0:
        print('GetStates requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetStates())

elif cmd == 'GetNodeLocation':
    if len(args) != 1:
        print('GetNodeLocation requires 1 args')
        sys.exit(1)
    pp.pprint(client.GetNodeLocation(eval(args[0]),))

elif cmd == 'GetNodeNumber':
    if len(args) != 0:
        print('GetNodeNumber requires 0 args')
        sys.exit(1)
    pp.pprint(client.GetNodeNumber())

elif cmd == 'NextSimulation':
    if len(args) != 0:
        print('NextSimulation requires 0 args')
        sys.exit(1)
    pp.pprint(client.NextSimulation())

elif cmd == 'SendNextUnityCondition':
    if len(args) != 1:
        print('SendNextUnityCondition requires 1 args')
        sys.exit(1)
    pp.pprint(client.SendNextUnityCondition(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
